#!/usr/bin/env python3

from peewee import *
import argparse
import datetime
import csv

db = SqliteDatabase('spend.db')

class Income(Model):
    amount = DoubleField()
    period = IntegerField()

    class Meta:
        database = db

    def daily_amount(self):
        return self.amount / self.period

class Bill(Model):
    amount = DoubleField()
    period = IntegerField()

    class Meta:
        database = db

    def daily_amount(self):
        return self.amount / self.ieriod

class Spend(Model):
    date = DateTimeField(default=datetime.datetime.now)
    amount = DoubleField()
    description = TextField()

    class Meta:
        database = db

class AsbVisaRow():

    def __init__(self, date_processed, date_of_transaction, unique_id, transaction_type, reference, description, amount):
        self.date_processed = date_processed
        self.date_of_transaction = date_of_transaction
        self.unique_id = unique_id
        self.transaction_type = transaction_type
        self.reference = reference
        self.description = description
        self.amount = amount

def add_income(amount, period):
    income = Income.create(amount, period)
    income.save()

def print_income():
    total_daily_income = 0.0
    for income in Income.select():
        total_daily_income += income.daily_amount()
        print(income.amount, income.period)
    print('Total daily income: ', total_daily_income)

def add_bill(amount, period):
        bill = Bill.create(amount, period)
        bill.save()

def print_bill():
    total_daily_bill = 0.0
    for bill in Bill.select():
        total_daily_bill += bill.dialy_amount()
        print(bill.amount, bill.period)
    print('Total daily bill: ', total_daily_bill)

def add_spend(amount, date, description):
    q = Spend.insert(amount=amount, date=date, description=description)
    q.execute()

def remove_spend(id):
    q = Spend.delete().where(Spend.id == id)
    q.execute()

def print_spend():
    # transactions in order of most recent to least recent
    transactions = Spend.select().order_by(Spend.date.desc()) 
    days = (transactions[0].date - transactions[transactions.count() - 1].date).days
    total_spend = 0.0
    for spend in transactions:
        total_spend += spend.amount
        print(spend.id, spend.date, spend.amount, spend.description)
    print("average daily spend: ", total_spend / days)

def import_spending(file, format):
    print(file, format)
    with open(file) as f:
        reader = csv.reader(f)
        # skip headers
        next(reader)
        next(reader)
        next(reader)
        next(reader)
        next(reader)
        next(reader)
        for row in reader:
            transaction = AsbVisaRow( \
                    datetime.datetime.strptime(row[0], '%Y/%m/%d'), \
                    datetime.datetime.strptime(row[1], '%Y/%m/%d'), \
                    row[2], row[3], row[4], row[5], float(row[6]))
            
            if transaction.transaction_type == 'DEBIT':
                add_spend( \
                        transaction.amount, \
                        transaction.date_of_transaction, \
                        transaction.description)


def print_all():
    print_income()
    print_bill()
    print_spend()

db.connect()
if not Income.table_exists():
    db.create_tables([Income, Bill, Spend])

parser = argparse.ArgumentParser()
parser.add_argument('-p', '--print', action='store_true')

subparsers = parser.add_subparsers(dest='subcommand')

# spend command
spend_parser = subparsers.add_parser('spend')
spend_parser.add_argument('-a', '--add', nargs='+')
spend_parser.add_argument('-d', '--delete', nargs=1)

# income command
income_parser = subparsers.add_parser('income')
income_parser.add_argument('-d', '--delete', nargs=1)

# bill command
bill_parser = subparsers.add_parser('bill')
bill_parser.add_argument('-a', '--add', nargs=2)
bill_parser.add_argument('-d', '--delete', nargs=1)

# import command
import_parser = subparsers.add_parser('import')
import_parser.add_argument('file', nargs=1)
import_parser.add_argument('-f', '--format', nargs=1)

args = parser.parse_args()

if args.subcommand == 'spend':
    print('spend')
    if not args.delete == None:
        # delete spending by id provided
        remove_spend(args.delete[0])
    else:
        # add each positional arg
        for spend in args.add:
            add_spend(spend)

elif args.subcommand == 'income':
    print('income')
elif args.subcommand == 'bill':
    print('bill')
elif args.subcommand == 'import':
    print('import')
    import_spending(args.file[0], "")
else :    
    if args.print == True:
        print_all()

print(args)

